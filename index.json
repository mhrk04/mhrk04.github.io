[{"content":" Tested on : Ubuntu Server 20.04 LTS\n Today, I want to show you how to run linux command in background even the terminal close.\nI will use rclone as example application to run in background. It\u0026rsquo;s not difficult to run command in background. You just need to add \u0026amp; symbol and type disown command after the first command run in the background.\nExample : rclone sync -P /mnt/disk4/pictures /mnt/disks/external/pictures \u0026gt; ./rclone-log.txt \u0026amp; then run :\ndisown  Rclone with -P tags will show the progress of sync\n  The \u0026gt; symbol is to forward stdout to a file. So, the output not come out to the current session of terminal. This will able you to see the progress by run tail -f ./rclone.txt on the other terminal session.\n The ampersand will run the task in the background and disown will allow it to run even after you close your session. This will stop running once you reboot.\n","permalink":"https://log.mhaziqrk.uk/posts/run-command-in-background-linux/","summary":"Tested on : Ubuntu Server 20.04 LTS\n Today, I want to show you how to run linux command in background even the terminal close.\nI will use rclone as example application to run in background. It\u0026rsquo;s not difficult to run command in background. You just need to add \u0026amp; symbol and type disown command after the first command run in the background.\nExample : rclone sync -P /mnt/disk4/pictures /mnt/disks/external/pictures \u0026gt; .","title":"Run Command in Background on Linux"},{"content":"Use Your Laptop As A Server  Tested on : Ubuntu 20.04 LTS\n To disable entering the sleep mode I had to edit the /etc/systemd/logind.conf file and modify the line:\nJust uncomment the line by removing #\nfrom this :\n#HandleLidSwitch=suspend #LidSwitchIgnoreInhibited=no #HandleLidSwitchDocked=ignore to this :\nHandleLidSwitch=ignore LidSwitchIgnoreInhibited=no HandleLidSwitchDocked=ignore Then restart the OS via:\nsudo service systemd-logind restart Then you can close the laptop lid .\n","permalink":"https://log.mhaziqrk.uk/posts/laptop-lid-ignore/","summary":"Use Your Laptop As A Server  Tested on : Ubuntu 20.04 LTS\n To disable entering the sleep mode I had to edit the /etc/systemd/logind.conf file and modify the line:\nJust uncomment the line by removing #\nfrom this :\n#HandleLidSwitch=suspend #LidSwitchIgnoreInhibited=no #HandleLidSwitchDocked=ignore to this :\nHandleLidSwitch=ignore LidSwitchIgnoreInhibited=no HandleLidSwitchDocked=ignore Then restart the OS via:\nsudo service systemd-logind restart Then you can close the laptop lid .","title":"Ubuntu Server - Laptop Lid Ignore"},{"content":" Copy from The Digital Life Blog\n    Optimize your deployments to lower the attack surface, especially when you’re running administrative web interfaces and Docker Containers.\n SECURITY IS NOT A SIMPLE CHECK-LIST First, I want to emphasize how important it is that you develop your own security strategy. Because when you search on the web about “How to protect Linux” or “Harden your Linux Server”, you’ll find tons of articles. People are just throwing out their “best practices” (just like this article here :). And you might be seduced to just grab some commands, run it on your server, and then assume you’re done! Fine, you don’t need to worry about security anymore!\nWell, that’s probably the worst thing you could do. Because Cybersecurity is much more complicated than a simple Check-List. It’s not just enough to copy-paste some commands. There are so many aspects of server security that you would need to consider. And even when you went through all the recommendations, you might still miss something, or face edge-cases you haven’t thought about. That’s of course, very challenging!\nBut it’s still a great idea to have a solid setup that’s protected from the most common and critical threats on the web. So, my biggest wish is that you carefully think about it and develop your own security strategy. Because some recommendations in this article might apply to your scenario, while some might not. However, I still want to give you some ideas, tips, and of course, practical examples, how I’m planning a security strategy on my servers. Let’s go!\nALWAYS UPDATE YOUR SOFTWARE This is the most basic and simple thing you should always do! It’s also the most effective one to protect your Linux Server. because for most security vulnerabilities there is already a patch out there, once they’re disclosures. So, you might want to upgrade your software as soon as there is a new security patch available.\nOn my Ubuntu servers, I use the “unattended-upgrades” package, which should be already installed. You simply can configure it with these two commands.\nsudo apt install unattended-upgrades sudo dpkg-reconfigure --priority=low unattended-upgrades DON’T FORGET TO UPDATE YOUR DOCKER CONTAINERS Another important fact, most tutorials forget, is to update your Docker Containers as well! Because Docker Containers are not storing and downloading any updates automatically. The correct way to upgrade them is to destroy the container and redeploy it with a new image.\nOf course, I don’t want to do this manually all the time, therefore I’m using a tool that’s called Watchtower. I’ve made a separate tutorial on Watchtower and how to configure it, here.\nContinue to Blog Post You can read more here\n","permalink":"https://log.mhaziqrk.uk/posts/protect-your-linux-server-against-hackers-and-malware/","summary":"Copy from The Digital Life Blog\n    Optimize your deployments to lower the attack surface, especially when you’re running administrative web interfaces and Docker Containers.\n SECURITY IS NOT A SIMPLE CHECK-LIST First, I want to emphasize how important it is that you develop your own security strategy. Because when you search on the web about “How to protect Linux” or “Harden your Linux Server”, you’ll find tons of articles.","title":"Protect Your Linux Server Against Hackers and Malware"},{"content":"   SSL Certificates Cheat-Sheet X.509 is an ITU standard defining the format of public key certificates. X.509 are used in TLS/SSL, which is the basis for HTTPS. An X.509 certificate binds an identity to a public key using a digital signature. A certificate contains an identity (hostname, organization, etc.) and a public key (RSA, DSA, ECDSA, ed25519, etc.), and is either signed by a Certificate Authority or is Self-Signed.\nSelf-Signed Certificates Generate CA  Generate RSA  openssl genrsa -aes256 -out ca-key.pem 4096 Generate a public CA Cert  openssl req -new -x509 -sha256 -days 365 -key ca-key.pem -out ca.pem Generate Certificate  Create a RSA key  openssl genrsa -out cert-key.pem 4096 Create a Certificate Signing Request (CSR)  openssl req -new -sha256 -subj \u0026#34;/CN=yourcn\u0026#34; -key cert-key.pem -out cert.csr Create a extfile with all the alternative names  echo \u0026#34;subjectAltName=DNS:your-dns.record,IP:257.10.10.1\u0026#34; \u0026gt;\u0026gt; extfile.cnf # optional echo extendedKeyUsage = serverAuth \u0026gt;\u0026gt; extfile.cnf Create the certificate  openssl x509 -req -sha256 -days 365 -in cert.csr -CA ca.pem -CAkey ca-key.pem -out cert.pem -extfile extfile.cnf -CAcreateserial Certificate Formats X.509 Certificates exist in Base64 Formats PEM (.pem, .crt, .ca-bundle), PKCS#7 (.p7b, p7s) and Binary Formats DER (.der, .cer), PKCS#12 (.pfx, p12).\nConvert Certs    COMMAND CONVERSION     openssl x509 -outform der -in cert.pem -out cert.der PEM to DER   openssl x509 -inform der -in cert.der -out cert.pem DER to PEM   openssl pkcs12 -in cert.pfx -out cert.pem -nodes PFX to PEM    Verify Certificates openssl verify -CAfile ca.pem -verbose cert.pem\nInstall the CA Cert as a trusted root CA On Debian \u0026amp; Derivatives  Move the CA certificate (ca.pem) into /usr/local/share/ca-certificates/ca.crt. Update the Cert Store with:  sudo update-ca-certificates Refer the documentation here and here.\nOn Fedora  Move the CA certificate (ca.pem) to /etc/pki/ca-trust/source/anchors/ca.pem or /usr/share/pki/ca-trust-source/anchors/ca.pem Now run (with sudo if necessary):  update-ca-trust Refer the documentation here.\nOn Arch System-wide – Arch(p11-kit) (From arch wiki)\n Run (As root)  trust anchor --store myCA.crt  The certificate will be written to /etc/ca-certificates/trust-source/myCA.p11-kit and the \u0026ldquo;legacy\u0026rdquo; directories automatically updated. If you get \u0026ldquo;no configured writable location\u0026rdquo; or a similar error, import the CA manually: Copy the certificate to the /etc/ca-certificates/trust-source/anchors directory. and then  update-ca-trust wiki page here\nOn Windows Assuming the path to your generated CA certificate as C:\\ca.pem, run:\nImport-Certificate -FilePath \u0026#34;C:\\ca.pem\u0026#34; -CertStoreLocation Cert:\\LocalMachine\\Root  Set -CertStoreLocation to Cert:\\CurrentUser\\Root in case you want to trust certificates only for the logged in user.  OR\nIn Command Prompt, run:\ncertutil.exe -addstore root C:\\ca.pem  certutil.exe is a built-in tool (classic System32 one) and adds a system-wide trust anchor.  On Android The exact steps vary device-to-device, but here is a generalised guide:\n Open Phone Settings Locate Encryption and Credentials section. It is generally found under Settings \u0026gt; Security \u0026gt; Encryption and Credentials Choose Install a certificate Choose CA Certificate Locate the certificate file ca.pem on your SD Card/Internal Storage using the file manager. Select to load it. Done!  Source : Github, Youtube\n","permalink":"https://log.mhaziqrk.uk/posts/self-sign-cert/","summary":"SSL Certificates Cheat-Sheet X.509 is an ITU standard defining the format of public key certificates. X.509 are used in TLS/SSL, which is the basis for HTTPS. An X.509 certificate binds an identity to a public key using a digital signature. A certificate contains an identity (hostname, organization, etc.) and a public key (RSA, DSA, ECDSA, ed25519, etc.), and is either signed by a Certificate Authority or is Self-Signed.","title":"Self Sign Cert"},{"content":" Base On : VIM Tutor - Version 1.7 Copied version\n  Install vimtutor on Fedora 35 : sudo dnf install vim-enhanced\n =============================================================================== = W e l c o m e t o t h e V I M T u t o r - Version 1.7 = =============================================================================== Vim is a very powerful editor that has many commands, too many to explain in a tutor such as this. This tutor is designed to describe enough of the commands that you will be able to easily use Vim as an all-purpose editor. The approximate time required to complete the tutor is 30 minutes, depending upon how much time is spent with experimentation. ATTENTION: The commands in the lessons will modify the text. Make a copy of this file to practice on (if you started \u0026#34;vimtutor\u0026#34; this is already a copy). It is important to remember that this tutor is set up to teach by use. That means that you need to execute the commands to learn them properly. If you only read the text, you will forget the commands! Now, make sure that your Caps-Lock key is NOT depressed and press the j key enough times to move the cursor so that lesson 1.1 completely fills the screen. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 1.1: MOVING THE CURSOR ** To move the cursor, press the h,j,k,l keys as indicated. ** ^ k Hint: The h key is at the left and moves left. \u0026lt; h l \u0026gt; The l key is at the right and moves right. j The j key looks like a down arrow. v 1. Move the cursor around the screen until you are comfortable. 2. Hold down the down key (j) until it repeats. Now you know how to move to the next lesson. 3. Using the down key, move to lesson 1.2. NOTE: If you are ever unsure about something you typed, press \u0026lt;ESC\u0026gt; to place you in Normal mode. Then retype the command you wanted. NOTE: The cursor keys should also work. But using hjkl you will be able to move around much faster, once you get used to it. Really! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 1.2: EXITING VIM !! NOTE: Before executing any of the steps below, read this entire lesson!! 1. Press the \u0026lt;ESC\u0026gt; key (to make sure you are in Normal mode). 2. Type: :q! \u0026lt;ENTER\u0026gt;. This exits the editor, DISCARDING any changes you have made. 3. Get back here by executing the command that got you into this tutor. That might be: vimtutor \u0026lt;ENTER\u0026gt; 4. If you have these steps memorized and are confident, execute steps 1 through 3 to exit and re-enter the editor. NOTE: :q! \u0026lt;ENTER\u0026gt; discards any changes you made. In a few lessons you will learn how to save the changes to a file. 5. Move the cursor down to lesson 1.3. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 1.3: TEXT EDITING - DELETION ** Press x to delete the character under the cursor. ** 1. Move the cursor to the line below marked ---\u0026gt;. 2. To fix the errors, move the cursor until it is on top of the character to be deleted. 3. Press the x key to delete the unwanted character. 4. Repeat steps 2 through 4 until the sentence is correct. ---\u0026gt; The ccow jumpedd ovverr thhe mooon. 5. Now that the line is correct, go on to lesson 1.4. NOTE: As you go through this tutor, do not try to memorize, learn by usage. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 1.4: TEXT EDITING - INSERTION ** Press i to insert text. ** 1. Move the cursor to the first line below marked ---\u0026gt;. 2. To make the first line the same as the second, move the cursor on top of the character BEFORE which the text is to be inserted. 3. Press i and type in the necessary additions. 4. As each error is fixed press \u0026lt;ESC\u0026gt; to return to Normal mode. Repeat steps 2 through 4 to correct the sentence. ---\u0026gt; There is text misng this . ---\u0026gt; There is some text missing from this line. 5. When you are comfortable inserting text move to lesson 1.5. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 1.5: TEXT EDITING - APPENDING ** Press A to append text. ** 1. Move the cursor to the first line below marked ---\u0026gt;. It does not matter on what character the cursor is in that line. 2. Press A and type in the necessary additions. 3. As the text has been appended press \u0026lt;ESC\u0026gt; to return to Normal mode. 4. Move the cursor to the second line marked ---\u0026gt; and repeat steps 2 and 3 to correct this sentence. ---\u0026gt; There is some text missing from th There is some text missing from this line. ---\u0026gt; There is also some text miss There is also some text missing here. 5. When you are comfortable appending text move to lesson 1.6. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 1.6: EDITING A FILE ** Use :wq to save a file and exit. ** !! NOTE: Before executing any of the steps below, read this entire lesson!! 1. If you have access to another terminal, do the following there. Otherwise, exit this tutor as you did in lesson 1.2: :q! 2. At the shell prompt type this command: vim file.txt \u0026lt;ENTER\u0026gt; \u0026#39;vim\u0026#39; is the command to start the Vim editor, \u0026#39;file.txt\u0026#39; is the name of the file you wish to edit. Use the name of a file that you can change. 3. Insert and delete text as you learned in the previous lessons. 4. Save the file with changes and exit Vim with: :wq \u0026lt;ENTER\u0026gt; 5. If you have quit vimtutor in step 1 restart the vimtutor and move down to the following summary. 6. After reading the above steps and understanding them: do it. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 1 SUMMARY 1. The cursor is moved using either the arrow keys or the hjkl keys. h (left) j (down) k (up) l (right) 2. To start Vim from the shell prompt type: vim FILENAME \u0026lt;ENTER\u0026gt; 3. To exit Vim type: \u0026lt;ESC\u0026gt; :q! \u0026lt;ENTER\u0026gt; to trash all changes. OR type: \u0026lt;ESC\u0026gt; :wq \u0026lt;ENTER\u0026gt; to save the changes. 4. To delete the character at the cursor type: x 5. To insert or append text type: i type inserted text \u0026lt;ESC\u0026gt; insert before the cursor A type appended text \u0026lt;ESC\u0026gt; append after the line NOTE: Pressing \u0026lt;ESC\u0026gt; will place you in Normal mode or will cancel an unwanted and partially completed command. Now continue with lesson 2. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 2.1: DELETION COMMANDS ** Type dw to delete a word. ** 1. Press \u0026lt;ESC\u0026gt; to make sure you are in Normal mode. 2. Move the cursor to the line below marked ---\u0026gt;. 3. Move the cursor to the beginning of a word that needs to be deleted. 4. Type dw to make the word disappear. NOTE: The letter d will appear on the last line of the screen as you type it. Vim is waiting for you to type w . If you see another character than d you typed something wrong; press \u0026lt;ESC\u0026gt; and start over. ---\u0026gt; There are a some words fun that don\u0026#39;t belong paper in this sentence. 5. Repeat steps 3 and 4 until the sentence is correct and go to lesson 2.2. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 2.2: MORE DELETION COMMANDS ** Type d$ to delete to the end of the line. ** 1. Press \u0026lt;ESC\u0026gt; to make sure you are in Normal mode. 2. Move the cursor to the line below marked ---\u0026gt;. 3. Move the cursor to the end of the correct line (AFTER the first . ). 4. Type d$ to delete to the end of the line. ---\u0026gt; Somebody typed the end of this line twice. end of this line twice. 5. Move on to lesson 2.3 to understand what is happening. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 2.3: ON OPERATORS AND MOTIONS Many commands that change text are made from an operator and a motion. The format for a delete command with the d delete operator is as follows: d motion Where: d - is the delete operator. motion - is what the operator will operate on (listed below). A short list of motions: w - until the start of the next word, EXCLUDING its first character. e - to the end of the current word, INCLUDING the last character. $ - to the end of the line, INCLUDING the last character. Thus typing de will delete from the cursor to the end of the word. NOTE: Pressing just the motion while in Normal mode without an operator will move the cursor as specified. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 2.4: USING A COUNT FOR A MOTION ** Typing a number before a motion repeats it that many times. ** 1. Move the cursor to the start of the line below marked ---\u0026gt;. 2. Type 2w to move the cursor two words forward. 3. Type 3e to move the cursor to the end of the third word forward. 4. Type 0 (zero) to move to the start of the line. 5. Repeat steps 2 and 3 with different numbers. ---\u0026gt; This is just a line with words you can move around in. 6. Move on to lesson 2.5. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 2.5: USING A COUNT TO DELETE MORE ** Typing a number with an operator repeats it that many times. ** In the combination of the delete operator and a motion mentioned above you insert a count before the motion to delete more: d number motion 1. Move the cursor to the first UPPER CASE word in the line marked ---\u0026gt;. 2. Type d2w to delete the two UPPER CASE words. 3. Repeat steps 1 and 2 with a different count to delete the consecutive UPPER CASE words with one command. ---\u0026gt; this ABC DE line FGHI JK LMN OP of words is Q RS TUV cleaned up. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 2.6: OPERATING ON LINES ** Type dd to delete a whole line. ** Due to the frequency of whole line deletion, the designers of Vi decided it would be easier to simply type two d\u0026#39;s to delete a line. 1. Move the cursor to the second line in the phrase below. 2. Type dd to delete the line. 3. Now move to the fourth line. 4. Type 2dd to delete two lines. ---\u0026gt; 1) Roses are red, ---\u0026gt; 2) Mud is fun, ---\u0026gt; 3) Violets are blue, ---\u0026gt; 4) I have a car, ---\u0026gt; 5) Clocks tell time, ---\u0026gt; 6) Sugar is sweet ---\u0026gt; 7) And so are you. Doubling to operate on a line also works for operators mentioned below. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 2.7: THE UNDO COMMAND ** Press u to undo the last commands, U to fix a whole line. ** 1. Move the cursor to the line below marked ---\u0026gt; and place it on the first error. 2. Type x to delete the first unwanted character. 3. Now type u to undo the last command executed. 4. This time fix all the errors on the line using the x command. 5. Now type a capital U to return the line to its original state. 6. Now type u a few times to undo the U and preceding commands. 7. Now type CTRL-R (keeping CTRL key pressed while hitting R) a few times to redo the commands (undo the undo\u0026#39;s). ---\u0026gt; Fiix the errors oon thhis line and reeplace them witth undo. 8. These are very useful commands. Now move on to the lesson 2 Summary. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 2 SUMMARY 1. To delete from the cursor up to the next word type: dw 2. To delete from the cursor up to the end of the word type: de 3. To delete from the cursor to the end of a line type: d$ 4. To delete a whole line type: dd 5. To repeat a motion prepend it with a number: 2w 6. The format for a change command is: operator [number] motion where: operator - is what to do, such as d for delete [number] - is an optional count to repeat the motion motion - moves over the text to operate on, such as w (word), e (end of word), $ (end of the line), etc. 7. To move to the start of the line use a zero: 0 8. To undo previous actions, type: u (lowercase u) To undo all the changes on a line, type: U (capital U) To undo the undo\u0026#39;s, type: CTRL-R ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 3.1: THE PUT COMMAND ** Type p to put previously deleted text after the cursor. ** 1. Move the cursor to the first line below marked ---\u0026gt;. 2. Type dd to delete the line and store it in a Vim register. 3. Move the cursor to the c) line, ABOVE where the deleted line should go. 4. Type p to put the line below the cursor. 5. Repeat steps 2 through 4 to put all the lines in correct order. ---\u0026gt; d) Can you learn too? ---\u0026gt; b) Violets are blue, ---\u0026gt; c) Intelligence is learned, ---\u0026gt; a) Roses are red, ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 3.2: THE REPLACE COMMAND ** Type rx to replace the character at the cursor with x . ** 1. Move the cursor to the first line below marked ---\u0026gt;. 2. Move the cursor so that it is on top of the first error. 3. Type r and then the character which should be there. 4. Repeat steps 2 and 3 until the first line is equal to the second one. ---\u0026gt; Whan this lime was tuoed in, someone presswd some wrojg keys! ---\u0026gt; When this line was typed in, someone pressed some wrong keys! 5. Now move on to lesson 3.3. NOTE: Remember that you should be learning by doing, not memorization. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 3.3: THE CHANGE OPERATOR ** To change until the end of a word, type ce . ** 1. Move the cursor to the first line below marked ---\u0026gt;. 2. Place the cursor on the u in lubw. 3. Type ce and the correct word (in this case, type ine ). 4. Press \u0026lt;ESC\u0026gt; and move to the next character that needs to be changed. 5. Repeat steps 3 and 4 until the first sentence is the same as the second. ---\u0026gt; This lubw has a few wptfd that mrrf changing usf the change operator. ---\u0026gt; This line has a few words that need changing using the change operator. Notice that ce deletes the word and places you in Insert mode. cc does the same for the whole line. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 3.4: MORE CHANGES USING c ** The change operator is used with the same motions as delete. ** 1. The change operator works in the same way as delete. The format is: c [number] motion 2. The motions are the same, such as w (word) and $ (end of line). 3. Move the cursor to the first line below marked ---\u0026gt;. 4. Move the cursor to the first error. 5. Type c$ and type the rest of the line like the second and press \u0026lt;ESC\u0026gt;. ---\u0026gt; The end of this line needs some help to make it like the second. ---\u0026gt; The end of this line needs to be corrected using the c$ command. NOTE: You can use the Backspace key to correct mistakes while typing. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 3 SUMMARY 1. To put back text that has just been deleted, type p . This puts the deleted text AFTER the cursor (if a line was deleted it will go on the line below the cursor). 2. To replace the character under the cursor, type r and then the character you want to have there. 3. The change operator allows you to change from the cursor to where the motion takes you. eg. Type ce to change from the cursor to the end of the word, c$ to change to the end of a line. 4. The format for change is: c [number] motion Now go on to the next lesson. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 4.1: CURSOR LOCATION AND FILE STATUS ** Type CTRL-G to show your location in the file and the file status. Type G to move to a line in the file. ** NOTE: Read this entire lesson before executing any of the steps!! 1. Hold down the Ctrl key and press g . We call this CTRL-G. A message will appear at the bottom of the page with the filename and the position in the file. Remember the line number for Step 3. NOTE: You may see the cursor position in the lower right corner of the screen This happens when the \u0026#39;ruler\u0026#39; option is set (see :help \u0026#39;ruler\u0026#39; ) 2. Press G to move you to the bottom of the file. Type gg to move you to the start of the file. 3. Type the number of the line you were on and then G . This will return you to the line you were on when you first pressed CTRL-G. 4. If you feel confident to do this, execute steps 1 through 3. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 4.2: THE SEARCH COMMAND ** Type / followed by a phrase to search for the phrase. ** 1. In Normal mode type the / character. Notice that it and the cursor appear at the bottom of the screen as with the : command. 2. Now type \u0026#39;errroor\u0026#39; \u0026lt;ENTER\u0026gt;. This is the word you want to search for. 3. To search for the same phrase again, simply type n . To search for the same phrase in the opposite direction, type N . 4. To search for a phrase in the backward direction, use ? instead of / . 5. To go back to where you came from press CTRL-O (Keep Ctrl down while pressing the letter o). Repeat to go back further. CTRL-I goes forward. ---\u0026gt; \u0026#34;errroor\u0026#34; is not the way to spell error; errroor is an error. NOTE: When the search reaches the end of the file it will continue at the start, unless the \u0026#39;wrapscan\u0026#39; option has been reset. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 4.3: MATCHING PARENTHESES SEARCH ** Type % to find a matching ),], or } . ** 1. Place the cursor on any (, [, or { in the line below marked ---\u0026gt;. 2. Now type the % character. 3. The cursor will move to the matching parenthesis or bracket. 4. Type % to move the cursor to the other matching bracket. 5. Move the cursor to another (,),[,],{ or } and see what % does. ---\u0026gt; This ( is a test line with (\u0026#39;s, [\u0026#39;s ] and {\u0026#39;s } in it. )) NOTE: This is very useful in debugging a program with unmatched parentheses! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 4.4: THE SUBSTITUTE COMMAND ** Type :s/old/new/g to substitute \u0026#39;new\u0026#39; for \u0026#39;old\u0026#39;. ** 1. Move the cursor to the line below marked ---\u0026gt;. 2. Type :s/thee/the \u0026lt;ENTER\u0026gt; . Note that this command only changes the first occurrence of \u0026#34;thee\u0026#34; in the line. 3. Now type :s/thee/the/g . Adding the g flag means to substitute globally in the line, change all occurrences of \u0026#34;thee\u0026#34; in the line. ---\u0026gt; thee best time to see thee flowers is in thee spring. 4. To change every occurrence of a character string between two lines, type :#,#s/old/new/g where #,# are the line numbers of the range of lines where the substitution is to be done. Type :%s/old/new/g to change every occurrence in the whole file. Type :%s/old/new/gc to find every occurrence in the whole file, with a prompt whether to substitute or not. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 4 SUMMARY 1. CTRL-G displays your location in the file and the file status. G moves to the end of the file. number G moves to that line number. gg moves to the first line. 2. Typing / followed by a phrase searches FORWARD for the phrase. Typing ? followed by a phrase searches BACKWARD for the phrase. After a search type n to find the next occurrence in the same direction or N to search in the opposite direction. CTRL-O takes you back to older positions, CTRL-I to newer positions. 3. Typing % while the cursor is on a (,),[,],{, or } goes to its match. 4. To substitute new for the first old in a line type :s/old/new To substitute new for all \u0026#39;old\u0026#39;s on a line type :s/old/new/g To substitute phrases between two line #\u0026#39;s type :#,#s/old/new/g To substitute all occurrences in the file type :%s/old/new/g To ask for confirmation each time add \u0026#39;c\u0026#39; :%s/old/new/gc ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 5.1: HOW TO EXECUTE AN EXTERNAL COMMAND ** Type :! followed by an external command to execute that command. ** 1. Type the familiar command : to set the cursor at the bottom of the screen. This allows you to enter a command-line command. 2. Now type the ! (exclamation point) character. This allows you to execute any external shell command. 3. As an example type ls following the ! and then hit \u0026lt;ENTER\u0026gt;. This will show you a listing of your directory, just as if you were at the shell prompt. Or use :!dir if ls doesn\u0026#39;t work. NOTE: It is possible to execute any external command this way, also with arguments. NOTE: All : commands must be finished by hitting \u0026lt;ENTER\u0026gt; From here on we will not always mention it. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 5.2: MORE ON WRITING FILES ** To save the changes made to the text, type :w FILENAME ** 1. Type :!dir or :!ls to get a listing of your directory. You already know you must hit \u0026lt;ENTER\u0026gt; after this. 2. Choose a filename that does not exist yet, such as TEST. 3. Now type: :w TEST (where TEST is the filename you chose.) 4. This saves the whole file (the Vim Tutor) under the name TEST. To verify this, type :!dir or :!ls again to see your directory. NOTE: If you were to exit Vim and start it again with vim TEST , the file would be an exact copy of the tutor when you saved it. 5. Now remove the file by typing (Windows): :!del TEST or (Unix): :!rm TEST ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 5.3: SELECTING TEXT TO WRITE ** To save part of the file, type v motion :w FILENAME ** 1. Move the cursor to this line. 2. Press v and move the cursor to the fifth item below. Notice that the text is highlighted. 3. Press the : character. At the bottom of the screen :\u0026#39;\u0026lt;,\u0026#39;\u0026gt; will appear. 4. Type w TEST , where TEST is a filename that does not exist yet. Verify that you see :\u0026#39;\u0026lt;,\u0026#39;\u0026gt;w TEST before you press \u0026lt;ENTER\u0026gt;. 5. Vim will write the selected lines to the file TEST. Use :!dir or :!ls to see it. Do not remove it yet! We will use it in the next lesson. NOTE: Pressing v starts Visual selection. You can move the cursor around to make the selection bigger or smaller. Then you can use an operator to do something with the text. For example, d deletes the text. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 5.4: RETRIEVING AND MERGING FILES ** To insert the contents of a file, type :r FILENAME ** 1. Place the cursor just above this line. NOTE: After executing Step 2 you will see text from lesson 5.3. Then move DOWN to see this lesson again. 2. Now retrieve your TEST file using the command :r TEST where TEST is the name of the file you used. The file you retrieve is placed below the cursor line. 3. To verify that a file was retrieved, cursor back and notice that there are now two copies of lesson 5.3, the original and the file version. NOTE: You can also read the output of an external command. For example, :r !ls reads the output of the ls command and puts it below the cursor. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 5 SUMMARY 1. :!command executes an external command. Some useful examples are: (Windows) (Unix) :!dir :!ls - shows a directory listing. :!del FILENAME :!rm FILENAME - removes file FILENAME. 2. :w FILENAME writes the current Vim file to disk with name FILENAME. 3. v motion :w FILENAME saves the Visually selected lines in file FILENAME. 4. :r FILENAME retrieves disk file FILENAME and puts it below the cursor position. 5. :r !dir reads the output of the dir command and puts it below the cursor position. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 6.1: THE OPEN COMMAND ** Type o to open a line below the cursor and place you in Insert mode. ** 1. Move the cursor to the first line below marked ---\u0026gt;. 2. Type the lowercase letter o to open up a line BELOW the cursor and place you in Insert mode. 3. Now type some text and press \u0026lt;ESC\u0026gt; to exit Insert mode. ---\u0026gt; After typing o the cursor is placed on the open line in Insert mode. 4. To open up a line ABOVE the cursor, simply type a capital O , rather than a lowercase o. Try this on the line below. ---\u0026gt; Open up a line above this by typing O while the cursor is on this line. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 6.2: THE APPEND COMMAND ** Type a to insert text AFTER the cursor. ** 1. Move the cursor to the start of the first line below marked ---\u0026gt;. 2. Press e until the cursor is on the end of li . 3. Type an a (lowercase) to append text AFTER the cursor. 4. Complete the word like the line below it. Press \u0026lt;ESC\u0026gt; to exit Insert mode. 5. Use e to move to the next incomplete word and repeat steps 3 and 4. ---\u0026gt; This li will allow you to pract appendi text to a line. ---\u0026gt; This line will allow you to practice appending text to a line. NOTE: a, i and A all go to the same Insert mode, the only difference is where the characters are inserted. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 6.3: ANOTHER WAY TO REPLACE ** Type a capital R to replace more than one character. ** 1. Move the cursor to the first line below marked ---\u0026gt;. Move the cursor to the beginning of the first xxx . 2. Now press R and type the number below it in the second line, so that it replaces the xxx . 3. Press \u0026lt;ESC\u0026gt; to leave Replace mode. Notice that the rest of the line remains unmodified. 4. Repeat the steps to replace the remaining xxx. ---\u0026gt; Adding 123 to xxx gives you xxx. ---\u0026gt; Adding 123 to 456 gives you 579. NOTE: Replace mode is like Insert mode, but every typed character deletes an existing character. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 6.4: COPY AND PASTE TEXT ** Use the y operator to copy text and p to paste it ** 1. Move to the line below marked ---\u0026gt; and place the cursor after \u0026#34;a)\u0026#34;. 2. Start Visual mode with v and move the cursor to just before \u0026#34;first\u0026#34;. 3. Type y to yank (copy) the highlighted text. 4. Move the cursor to the end of the next line: j$ 5. Type p to put (paste) the text. Then type: a second \u0026lt;ESC\u0026gt; . 6. Use Visual mode to select \u0026#34; item.\u0026#34;, yank it with y , move to the end of the next line with j$ and put the text there with p . ---\u0026gt; a) this is the first item. b) NOTE: You can also use y as an operator: yw yanks one word, yy yanks the whole line, then p puts that line. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 6.5: SET OPTION ** Set an option so a search or substitute ignores case ** 1. Search for \u0026#39;ignore\u0026#39; by entering: /ignore \u0026lt;ENTER\u0026gt; Repeat several times by pressing n . 2. Set the \u0026#39;ic\u0026#39; (Ignore case) option by entering: :set ic 3. Now search for \u0026#39;ignore\u0026#39; again by pressing n Notice that Ignore and IGNORE are now also found. 4. Set the \u0026#39;hlsearch\u0026#39; and \u0026#39;incsearch\u0026#39; options: :set hls is 5. Now type the search command again and see what happens: /ignore \u0026lt;ENTER\u0026gt; 6. To disable ignoring case enter: :set noic NOTE: To remove the highlighting of matches enter: :nohlsearch NOTE: If you want to ignore case for just one search command, use \\c in the phrase: /ignore\\c \u0026lt;ENTER\u0026gt; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 6 SUMMARY 1. Type o to open a line BELOW the cursor and start Insert mode. Type O to open a line ABOVE the cursor. 2. Type a to insert text AFTER the cursor. Type A to insert text after the end of the line. 3. The e command moves to the end of a word. 4. The y operator yanks (copies) text, p puts (pastes) it. 5. Typing a capital R enters Replace mode until \u0026lt;ESC\u0026gt; is pressed. 6. Typing \u0026#34;:set xxx\u0026#34; sets the option \u0026#34;xxx\u0026#34;. Some options are: \u0026#39;ic\u0026#39; \u0026#39;ignorecase\u0026#39; ignore upper/lower case when searching \u0026#39;is\u0026#39; \u0026#39;incsearch\u0026#39; show partial matches for a search phrase \u0026#39;hls\u0026#39; \u0026#39;hlsearch\u0026#39; highlight all matching phrases You can either use the long or the short option name. 7. Prepend \u0026#34;no\u0026#34; to switch an option off: :set noic ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 7.1: GETTING HELP ** Use the on-line help system ** Vim has a comprehensive on-line help system. To get started, try one of these three: - press the \u0026lt;HELP\u0026gt; key (if you have one) - press the \u0026lt;F1\u0026gt; key (if you have one) - type :help \u0026lt;ENTER\u0026gt; Read the text in the help window to find out how the help works. Type CTRL-W CTRL-W to jump from one window to another. Type :q \u0026lt;ENTER\u0026gt; to close the help window. You can find help on just about any subject, by giving an argument to the \u0026#34;:help\u0026#34; command. Try these (don\u0026#39;t forget pressing \u0026lt;ENTER\u0026gt;): :help w :help c_CTRL-D :help insert-index :help user-manual ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 7.2: CREATE A STARTUP SCRIPT ** Enable Vim features ** Vim has many more features than Vi, but most of them are disabled by default. To start using more features you should create a \u0026#34;vimrc\u0026#34; file. 1. Start editing the \u0026#34;vimrc\u0026#34; file. This depends on your system: :e ~/.vimrc for Unix :e ~/_vimrc for Windows 2. Now read the example \u0026#34;vimrc\u0026#34; file contents: :r $VIMRUNTIME/vimrc_example.vim 3. Write the file with: :w The next time you start Vim it will use syntax highlighting. You can add all your preferred settings to this \u0026#34;vimrc\u0026#34; file. For more information type :help vimrc-intro ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 7.3: COMPLETION ** Command line completion with CTRL-D and \u0026lt;TAB\u0026gt; ** 1. Make sure Vim is not in compatible mode: :set nocp 2. Look what files exist in the directory: :!ls or :!dir 3. Type the start of a command: :e 4. Press CTRL-D and Vim will show a list of commands that start with \u0026#34;e\u0026#34;. 5. Type d\u0026lt;TAB\u0026gt; and Vim will complete the command name to \u0026#34;:edit\u0026#34;. 6. Now add a space and the start of an existing file name: :edit FIL 7. Press \u0026lt;TAB\u0026gt;. Vim will complete the name (if it is unique). NOTE: Completion works for many commands. Just try pressing CTRL-D and \u0026lt;TAB\u0026gt;. It is especially useful for :help . ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Lesson 7 SUMMARY 1. Type :help or press \u0026lt;F1\u0026gt; or \u0026lt;HELP\u0026gt; to open a help window. 2. Type :help cmd to find help on cmd . 3. Type CTRL-W CTRL-W to jump to another window. 4. Type :q to close the help window. 5. Create a vimrc startup script to keep your preferred settings. 6. When typing a : command, press CTRL-D to see possible completions. Press \u0026lt;TAB\u0026gt; to use one completion. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ This concludes the Vim Tutor. It was intended to give a brief overview of the Vim editor, just enough to allow you to use the editor fairly easily. It is far from complete as Vim has many many more commands. Read the user manual next: \u0026#34;:help user-manual\u0026#34;. For further reading and studying, this book is recommended: Vim - Vi Improved - by Steve Oualline Publisher: New Riders The first book completely dedicated to Vim. Especially useful for beginners. There are many examples and pictures. See https://iccf-holland.org/click5.html This book is older and more about Vi than Vim, but also recommended: Learning the Vi Editor - by Linda Lamb Publisher: O\u0026#39;Reilly \u0026amp; Associates Inc. It is a good book to get to know almost anything you want to do with Vi. The sixth edition also includes information on Vim. This tutorial was written by Michael C. Pierce and Robert K. Ware, Colorado School of Mines using ideas supplied by Charles Smith, Colorado State University. E-mail: bware@mines.colorado.edu. Modified for Vim by Bram Moolenaar. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Source : Github\n","permalink":"https://log.mhaziqrk.uk/posts/vimtutor/","summary":"Base On : VIM Tutor - Version 1.7 Copied version\n  Install vimtutor on Fedora 35 : sudo dnf install vim-enhanced\n =============================================================================== = W e l c o m e t o t h e V I M T u t o r - Version 1.7 = =============================================================================== Vim is a very powerful editor that has many commands, too many to explain in a tutor such as this.","title":"Vimtutor - Tutorial for newbie Vim user"},{"content":" Cara ini terpakai kepada semua simkad yang mempunyai plan unlimited data tetapi hotspot tidak dibenarkan.\n Terdapat pelbagai cara yang boleh kita gunakan untuk bypass hotspot pada plan unlimited data. Antaranya :\nSolusi bypass yang ada : 1. Menggunakan Proxy Cara ini lebih mudah kerana hanya perlu install aplikasi http proxy pada phone dan hidupkan http/https proxy. Jangan lupa juga hidupkan hotspot seperti biasa.\nSelepas dihidupkan, anda akan nampak\nHosts 0.0.0.0 exposed via xxx.xxx.xxx.xxx(IP Address) Port 8080 Auth None Copy ip xxx.xxx.xxx.xxx tu ltak kan setting proxy kat device yang tersambung ke hotspot. Walla, dah boleh guna internet.\n2. Mengubah ttl(time to live) pada komputer Ini tricky sikit. Cara ini yang saya tahu boleh buat kat komputer.\nWindows Buka CMD dan Run As Admin\npaste command di bawah\nnetsh int ipv4 set glob defaultcurhoplimit=65 netsh int ipv6 set glob defaultcurhoplimit=65 Linux Buka terminal dan paste command di bawah\nsudo sysctl -w net.ipv4.ip_default_ttl=65 ","permalink":"https://log.mhaziqrk.uk/posts/bypass-hotspot-unlimited-data/","summary":"Cara ini terpakai kepada semua simkad yang mempunyai plan unlimited data tetapi hotspot tidak dibenarkan.\n Terdapat pelbagai cara yang boleh kita gunakan untuk bypass hotspot pada plan unlimited data. Antaranya :\nSolusi bypass yang ada : 1. Menggunakan Proxy Cara ini lebih mudah kerana hanya perlu install aplikasi http proxy pada phone dan hidupkan http/https proxy. Jangan lupa juga hidupkan hotspot seperti biasa.\nSelepas dihidupkan, anda akan nampak","title":"Bypass Hotspot Unlimited Data"},{"content":"SOLAT JAMAK \u0026amp; QASAR Apabila kita bermusafir lebih daripada dua marhalah, kita diberi kelonggaran untuk menjamak (menghimpun) dan mengqasar (memendekkan) solat.\nBerikut dikongsikan lebih lanjut tentang Solat Jamak \u0026amp; Qasar untuk panduan kita bersama.\nPengertian Solat jamak dan qasar adalah suatu keringanan yang diberi oleh Allah SWT kepada hamba-Nya bagi orang musafir dengan jarak melebihi dua marhalah.\nSYARAT-SYARAT PERJALANAN YANG DIHARUSKAN SOLAT JAMA’ \u0026amp; QASAR  Perjalanan yang jaraknya 81 km dan lebih. Perjalanan yang tentu tujuannya (bukan merayau). Perjalanan yang tidak bertujuan maksiat. Tidak diambil kira perjalanan untuk berniaga arak, mengamal riba atau menyamun.  Solat Qasar (Memendekkan) Solat qasar bermaksud memendekkan solat daripada 4 rakaat menjadi 2 rakaat.\nSolat yang boleh dipendekkan (qasar) : - ✔️ Solat Zohor - ✔️ Solat Asar - ✔️ Solat Isyak.\nSyarat-syarat Solat Qasar  ✔️ Solat fardhu yang diqasarkan berkenaan wajib ke atas seseorang yang bermusafir dan melakukannya semasa bermusafir ✔️ Perjalanannya telah melepasi sempadan qaryah ✔️ Tidak berniat menetap selama 4 hari atau lebih di tempat yang dituju (tak termasuk hari datang \u0026amp; pulang). ✔️ Tidak mengikuti imam solat yang bermukim.  Solat Jamak (Menghimpunkan) Solat jamak bermaksud menghimpunkan atau mengumpulkan 2 solat dalam satu waktu.\n Contohnya:  Mengumpulkan solat Zohor kepada Asar dan sebaliknya Mengumpulkan solat Maghrib dengan Isyak dan sebaliknya\nSolat Jamak terbahagi kepada 2:\nJAMAK TAKDIM  Kedua-dua solat mengikut tertib (dahului dengan solat empunya waktu) Niat jamak dilakukan dalam solat yang pertama (hingga sebelum beri salam) Berturut-turut antara solat pertama \u0026amp; kedua Masih musafir hingga takbir solat kedua  JAMAK TA’KHIR  Niat ta’khir kan solat pertama pada waktu kedua adalah ketika masuk waktu solat pertama. Masih musafir hingga selesai kedua-dua solat Tertib di antara kedua-dua solat TIDAK DISYARATKAN malah boleh dimulakan dengan mana-mana antara 2 solat tersebut  Lafaz niat i) Niat Jamak Taqdim dan Qasar ZOHOR – ASAR Sahaja aku solat fardhu Zohor dua rakaat dipendekkan dan dihimpunkan kepadanya Asar tunai kerana Allah SWT.\nSahaja aku solat fardhu Asar dua rakaat dipendekkan dan dihimpunkan kepadanya Zohor tunai kerana Allah SWT.\nMAGHRIB – ISYAK Sahaja aku solat fardhu Maghrib tiga rakaat dipendekkan dan dihimpunkan kepadanya Isyak tunai kerana Allah SWT.\nSahaja aku solat fardhu Isyak dua rakaat dipendekkan dan dihimpunkan kepadanya Maghrib tunai kerana Allah SWT.\nii) Niat Jamak Takhir dan Qasar ASAR – ZOHOR Sahaja aku solat fardhu Asar dua rakaat dipendekkan dan dihimpunkan kepadanya Zohor tunai kerana Allah SWT.\nSahaja aku solat fardhu Zohor dua rakaat dipendekkan dan dihimpunkan kepadanya Asar tunai kerana Allah SWT.\nISYAK – MAGHRIB Sahaja aku solat fardhu Isyak dua rakaat dipendekkan dan dihimpunkan kepadanya Maghrib tunai kerana Allah SWT.\nSahaja aku solat fardhu Maghrib tiga rakaat dipendekkan dan dihimpunkan kepadanya Isyak tunai kerana Allah SWT.\nSumber : JAKIM, ecentral\n","permalink":"https://log.mhaziqrk.uk/posts/solat-jamak-dan-qasar/","summary":"SOLAT JAMAK \u0026amp; QASAR Apabila kita bermusafir lebih daripada dua marhalah, kita diberi kelonggaran untuk menjamak (menghimpun) dan mengqasar (memendekkan) solat.\nBerikut dikongsikan lebih lanjut tentang Solat Jamak \u0026amp; Qasar untuk panduan kita bersama.\nPengertian Solat jamak dan qasar adalah suatu keringanan yang diberi oleh Allah SWT kepada hamba-Nya bagi orang musafir dengan jarak melebihi dua marhalah.\nSYARAT-SYARAT PERJALANAN YANG DIHARUSKAN SOLAT JAMA’ \u0026amp; QASAR  Perjalanan yang jaraknya 81 km dan lebih.","title":"Solat Jamak Dan Qasar : Panduan, Syarat \u0026 Niat (JAKIM)"},{"content":"Cara Setup Hugo Static Site di Github Pages   Bahan ini disalin terus daripada website hackmd. Hanya tujuan rujukan semata-mata. Ada beberapa bahagian diubah. Tutorial boleh ditonton di youtube - Tutorial: Blogging with Hugo and GitHub Pages-Sarah Gibson    Saya akan membawa anda melalui penciptaan tapak web anda sendiri, dihoskan pada GitHub Pages dan dibina dengan Hugo. Anda boleh melihat contoh tapaknya dipautkan di bawah.\n website : https://mhaziqrk.uk (website ini) Repo : https://github.com/mhrk04/mhrk04.github.io/tree/main   🎯 Objektif   Bina kandungan html daripada Markdown menggunakan Hugo\n  Lancarkan kandungan sebagai tapak web statik menggunakan GitHub Pages\n  Automasikan proses pelancaran dengan Continuous Deployment melalui GitHub Actions\n  Fahami cara mencipta dan membenamkan kandungan dengan Hugo\n  📌 Keperluan   Akaun Github\n Anda boleh sign up secara percuma    Terminal\n Linux Mac Windows: Linux Bash (preferred), Command Prompt - Jika menggunakan command prompt, beberapa arahan yang saya gunakan di bawah akan berbeza dan anda mungkin ingin merujuk cheatsheet    git version control\n Panduan pemasangan untuk semua sistem operasi    hugo\n Panduan pemasangan untuk semua sistem operasi    text editor pilihan ! Contoh:\n VSCode nano gedit Notepad++ emacs vim    🤷🏻‍♀️ Adakah saya perlu menggunakan terminal? Ya, hanya sedikit! GitHub menawarkan templat Jekyll terbina dalam yang boleh diakses melalui tetapan repositori GitHub. Lihat panduan di sini.\n❓ Ok\u0026hellip; kenapa Hugo dan bukan Jekyll? First time terjebak dengan static site generator. Jadi, hugo ialah static site generator pertama saya cuba\n Menggunakan Hugo menjadikan repositori yang lebih bersih.  Jekyll memerlukan banyak \u0026ldquo;barangan\u0026rdquo; tambahan (seperti templat gaya untuk pemaparan html) untuk dikomit terus ke repositori yang menyukarkan saya untuk bersenam di mana saya sepatutnya meletakkan sesuatu. Hugo menggunakan git submodules untuk menyediakan bahan yang sama ke tapak web anda tanpa benar-benar memasukkannya.\n         Repo layout with Jekyll Repo layout with Hugo     Binaan Hugo lebih pantas daripada binaan Jekyll.  Saya hanya akan membiarkan tangkapan skrin bercakap untuk diri mereka sendiri tentang yang ini\u0026hellip; Tetapi pada asasnya, membina dengan Hugo agak serta-merta, manakala Jekyll boleh mengambil masa beberapa minit untuk membina.\n         Build time with Jekyll Build time with Hugo     Hugo mempunyai kebergantungan(dependencies) yang jauh lebih sedikit daripada Jekyll.  Hugo dibina di atas Go, manakala [Jekyll memerlukan Ruby, RubyGems (dan pengikat untuk memasangnya), GCC (sejenis pengkompil) dan Make - kesemuanya ditambah sebagai persekitaran yang sukar untuk disediakan dan diselenggara.\n        😱😱😱    Ini bukan untuk mengatakan bahawa Jekyll tidak mempunyai sebarang positif! Sebagai contoh, ia mempunyai ekosistem plugin yang lebih kaya daripada Hugo. Walaupun, saya tidak perlu menggunakan plugin hanya untuk menerbitkan catatan blog semasa saya menggunakan Jekyll, dan setakat ini Hugo telah memenuhi semua keperluan blog saya.\nAnda boleh membaca lebih lanjut tentang perbezaan antara Hugo dan Jekyll di sini.\n Selebihnya dalam bahasa inggeris  🏃🏻‍♀️ Let\u0026rsquo;s go! :::info :wave: I will be demonstrating using another GitHub account I own, HelmUpgradeBot, so as not to interfere with my currently deployed website. :::\n1️⃣ Create and Setup your repository on GitHub In this first section, we will create the repository that will host our website on GitHub. We will do this entirely in the browser.\n Go to https://github.com and sign in to your account In the top, right-hand corner of the browser, click the plus + symbol and select \u0026ldquo;New repository\u0026rdquo; from the dropdown menu. Give your repository the name YOUR_USERNAME.github.io, filling in your username as appropriate. This is a special GitHub repository that will act as your website. Make sure that it is public! (You can have private GitHub Pages sites, but they cost money!)  Also add a README file to your repository and a license (I\u0026rsquo;ve used MIT in the example below but you might prefer Creative Commons). Once you\u0026rsquo;re happy, click \u0026ldquo;Create repository\u0026rdquo;            Example of how to fill in GitHub\u0026rsquo;s create repository form    :::warning :warning: At this point, I will add myself as a collaborator to the repository. This is because I have created this repo with a different account but will push to it using my usual account. YOU DO NOT NEED TO DO THIS. It just saves me a load of faff. :::\nOnce your GitHub repo has been created, click the large, green \u0026ldquo;code\u0026rdquo; button in the top-right, make sure \u0026ldquo;HTTPS\u0026rdquo; is selected, and click the clipboard icon to copy the contents of the text box.          Where to find the address of your GitHub repo    2️⃣ To the Terminal Now we will \u0026ldquo;clone\u0026rdquo; our GitHub repository - meaning we will add a copy of it to our local machines. This is where we will make changes to our repository.\n  Open up your terminal app on your machine\n  Change to a \u0026ldquo;sensible\u0026rdquo; directory somewhere on your filesystem.\n This could be Desktop, or maybe you have a folder called projects - wherever makes sense to you is the right place to go! I have a source/github folder where I keep my local repos, so I\u0026rsquo;ll change into there.  cd source/github   Now clone the repository using the git clone command and pasting the address we copied in step 4 of section 1.\n# Replace `HelmUpgradeBot` with your username git clone https://github.com/HelmUpgradeBot/HelmUpgradeBot.github.io.git   git clone will have created a new directory named after your repo, containing all the files currently in your repo (only the README and LICENSE files so far!) You can use the command ls to check this. Now change into that directory.\n# Replace `HelmUpgradeBot` with your username cd HelmUpgradeBot.github.io   The first action to take in good gitflow is to create a new branch to work on, so we are not saving our work to the main branch until we are ready. I\u0026rsquo;m going to call my new branch setup-hugo.\ngit checkout -b setup-hugo   And now we use hugo to create our website! The below command will auto-generate all of the structure we need to generate html files using hugo\u0026rsquo;s site template. The most important file this command will create is config.toml which will allow us to control the look and feel of our site. (:sparkles: Click here for a tangent into the TOML file format! TL;DR it\u0026rsquo;s a simpler form of YAML :sparkles:)\nhugo new site . --force :::info :wave: Some things to note about the above command:\n The . means \u0026ldquo;Create the site right here please\u0026rdquo;, not in another directory. We needed to use the --force flag as hugo would have complained that our directory wasn\u0026rsquo;t empty - remember the README and LICENSE? Using --force means that hugo will ignore those files when it generates the site. :::    Next we will add a theme. You can choose any of the free themes available at https://themes.gohugo.io/ but, for this tutorial, we will use Anatole. Add the theme to your repository using the git submodule command.\ngit submodule add https://github.com/lxndrblz/anatole.git themes/anatole :::info :wave: Now under the themes/anatole directory, we will have checked out a single reference of the anatole repository to build the content from. :::\n  Now we need to update config.toml to use the theme. Open up the file in your favourite text editor and add the following line to the bottom.\ntheme = \u0026#34;anatole\u0026#34; While you have the config file open, let\u0026rsquo;s make a few more edits to personalise our site. The templates provide a guide on common configuration options - Anatole\u0026rsquo;s guide is here.\nFirstly, I strongly recommend updating the baseURL field to be that of our GitHub repository, like so:\n# Replace `HelmUpgradeBot` with your username baseURL = \u0026#34;https://HelmUpgradeBot.github.io/\u0026#34; Another super useful field to add here is the one that will enable the rendering of emojis in your posts :wink:\nenableEmoji = true We are now going to create a new section in our config file called [params] and list some more metadata about our site there.\nGive your website a cool name in the title field, describe what your site is about in the desription field, and add your name under the author field:\n[params] title = \u0026#34;A Bot with a Blog\u0026#34; author = \u0026#34;HelmUpgradeBot\u0026#34; description = \u0026#34;Automatic blogging from a GitHub bot\u0026#34; All together, your config file should now look like this:\nbaseURL = \u0026#34;https://HelmUpgradeBot.github.io/\u0026#34; languageCode = \u0026#34;en-us\u0026#34; # Update to \u0026#34;en-gb\u0026#34; if you prefer, or another language! theme = \u0026#34;anatole\u0026#34; enableEmoji = true [params] title = \u0026#34;A Bot with a Blog\u0026#34; author = \u0026#34;HelmUpgradeBot\u0026#34; description = \u0026#34;Automatic blogging from a GitHub bot\u0026#34; Make sure to save the file!\n:::warning :warning: Some of the information I\u0026rsquo;ve asked you to add to your config.toml file will be specific to the \u0026ldquo;anatole\u0026rdquo; theme and will not work if you swap themes. You shoud always check the documentation and example site of the theme you wish to use as they will outline what fields can be used and what their expected values will be. :::\n  Now check your site builds by running the below command in your terminal, and then visiting http://localhost:1313 in your browser.\nhugo server   Our blog doesn\u0026rsquo;t look very exciting yet, but it\u0026rsquo;s good to know that it works! Let\u0026rsquo;s save what we have and think about how to get it online.\nClose your browser window displaying your website and run Ctrl+C in your terminal to stop the hugo server command.\n3️⃣ Push to GitHub   First of all, we need to tell git to track all of the changes we have created. We do this by adding them to git\u0026rsquo;s staging area.\ngit add . :::info :wave: As we saw before, here the . means \u0026ldquo;please add everything in this current location.\u0026rdquo; :::\nIf you now run git status you should see a similar output as below.\n$ git status On branch setup-hugo Changes to be committed:  (use \u0026#34;git restore --staged \u0026lt;file\u0026gt;...\u0026#34; to unstage)  new file: .gitmodules  new file: archetypes/default.md  new file: config.toml  new file: themes/anatole   To tell git to make a snapshot (or \u0026ldquo;commit\u0026rdquo;) of the current state of our files, we use the git commit command, passing the -m flag in order to leave a message about what we\u0026rsquo;ve changed.\ngit commit -m \u0026#34;Initial setup of blog site\u0026#34; The output should look similar to below.\n$ git commit -m \u0026#34;Initial setup of blog site\u0026#34; [setup-hugo 62d794e] Initial setup of blog site  4 files changed, 19 insertions(+)  create mode 100644 .gitmodules  create mode 100644 archetypes/default.md  create mode 100644 config.toml  create mode 160000 themes/anatole :::info :wave: Now if we run git status again, we should see the message nothing to commit, working tree clean :::\n  Now we push this commit from our local commit up to the GitHub server using the git push command. In the below command, origin is a reference to the original repo we setup on GitHub, and setup-hugo represents an instruction to create a new branch on the GitHub-hosted repo with the same name as our locally-created branch.\ngit push origin setup-hugo   If we head back onto GitHub to our repo\u0026rsquo;s page, we should now see a banner informing us that a branch has been updated and providing us with an option to \u0026ldquo;Compare \u0026amp; pull request\u0026rdquo;. Click that big, green button!\n          GitHub repo page with a banner and \u0026ldquo;Compare \u0026amp; pull request\u0026rdquo; button    You will be redirected to GitHub\u0026rsquo;s interface for opening a Pull Request (PR). Give your PR an informative title and a descriptive summary in the relevant boxes, then click \u0026ldquo;Create pull request\u0026rdquo;.\nIf we had any tests for our website, this is where they\u0026rsquo;d run before we merged the PR. However, we\u0026rsquo;ll set up our tests next, so go ahead and click \u0026ldquo;Merge pull request\u0026rdquo;, followed by \u0026ldquo;Confirm merge\u0026rdquo;.\nIf you head back over to the repo\u0026rsquo;s landing page, you\u0026rsquo;ll see our changes have now been added to the main branch - but that doesn\u0026rsquo;t mean our blog is live and deployed yet!\n        The GitHub repo\u0026rsquo;s main branch with the hugo files now added to it    First, let\u0026rsquo;s update our local copy of the repo and then we can add a GitHub Action workflow to automatically deploy our website for us.\nIn your terminal, run the following:\ngit checkout main # Switch back to the main branch git pull # Pull the changes to the main branch down from GitHub 4️⃣ Continuous Deployment The concept of Continuous Deployment is as follows:\n For every change we integrate or merge into our GitHub repo, a fresh version of our website should be created and deployed automatically for us.\n In this section, we will create a workflow that will achieve this for us. It will run on GitHub Actions.\n  Let\u0026rsquo;s start by checking out a new branch in our local repo.\ngit checkout -b add-cd   GitHub Actions are automatically triggered by files that are stored in a special folder called .github/workflows. So let\u0026rsquo;s create that folder!\nmkdir -p .github/workflows :::info :wave: The -p flag here means \u0026ldquo;If the parent directory doesn\u0026rsquo;t already exist (i.e. .github/), then please create that too.\u0026rdquo; Try running the above command without this flag first and see what error message you get! :::\n  Create a cd.yml (cd is short for Continuous Deployment :wink:) file inside the .github/workflows folder and open it in your favourite text editor. (:sparkles: Click here for a tangent into the YAML (.yml) file format! :sparkles:)\n  I\u0026rsquo;ve created a workflow for us to use below which you should feel free to copy and paste into your cd.yml file, and then we\u0026rsquo;ll go through each section.\n  :::warning :warning: Whitespace matters with YAML so be careful when you copy and paste! :::\nname: Build and Deploy Site on: push: branches: - main pull_request: branches: - main jobs: build-and-deploy-site: runs-on: ubuntu-latest steps: - name: Checkout repo uses: actions/checkout@v2 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; - name: Build site with Hugo run: hugo --minify - name: Check HTML uses: chabad360/htmlproofer@master with: directory: \u0026#34;./public\u0026#34; arguments: --only-4xx --check-favicon --check-html --assume-extension --empty-alt-ignore --disable-external continue-on-error: true - name: Deploy to GitHub Pages if: github.event_name == \u0026#39;push\u0026#39; \u0026amp;\u0026amp; github.ref == \u0026#39;refs/heads/main\u0026#39; uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public  The name parameter on line 1 defines what our workflow should be called The on block beginning on line 3 defines what events should trigger our workflow to run. We have two defined here:  on.push.branches = [main]: This tells GitHub Actions to run the workflow whenever a push is made to the main branch. This is most commonly when a PR is merged. on.pull_request.branches = [main]: This tells GitHub Actions to run the workflow every time a PR intending to merge something into the main branch is opened.   The jobs section beginning on line 11 defines which jobs the workflow will run when triggered. We have one job to run called build-and-deploy-site (defined on line 12) and we have requested the latest version of the Ubuntu Operating System to run this job on (defined on line 13; Windows and Mac OS\u0026rsquo;s are also available to execute jobs). The steps section beginning on line 14 defines each step involving in running the job  Step 1 (line 15) is a checkout step. This clones the repo like we did manually in step 3 of section 2. The fetch-depth: 0 line asks GitHub to not download the full repo history, only the most recent commit, and the submodules: true line asks GitHub to also checkout the submodules we depend on. Without this, our themes folder won\u0026rsquo;t be populated with the info we need to build the site! Step 2 (line 21) installs the latest version of Hugo Step 3 (line 26) builds the site using Hugo. The --minify flag ensures that the output HTML files are compressed to take up the minimum amount of space required. The ouput files are stored in a folder called public/. Step 4 (line 29) runs a tool called htmlproofer over the generated HTML files in public. This tool checks for things like broken links across the site. Step 5 (line 35) will commit the HTML files to a new branch on our repo called gh-pages. It only publishes the HTML files contained in the public directory as they are the only ones required to create the site at this point.  Note this step has an if statement (line 36) that states this step should only be executed when the event that triggered the workflow was a push to the main branch (most commonly a merged PR). This prevents the live website being redeployed by unreviewed/unapproved changes in a PR. This step also requires a secret GITHUB_TOKEN (line 39). You do not have to worry about creating and/or storing this token. It is a special token that is automatically generated by GitHub for every triggered workflow run and allows the workflow to commit and publish new branches.      Add, commit and push the cd.yml file to GitHub as we did before.\ngit add .github/workflows/cd.yml git commit -m \u0026#34;Add a GitHub Actions workflow to build and deploy the site\u0026#34; git push origin add-cd Create another PR in GitHub\u0026rsquo;s browser interface as we did previously. You should see the check now running and report a status at the bottom of the open PR page! Merge the PR once the test has passed. At any point, you can click the \u0026ldquo;Actions\u0026rdquo; tab at the top of the GitHub page to see the status of your GitHub Action workflows.\nWe now need to configure some more settings for the GitHub repo.\n Click the \u0026ldquo;Settings\u0026rdquo; tab along the top of the GitHub webpage. Select \u0026ldquo;Branches\u0026rdquo; from the menu on the left-hand-side (4th option from the top). We will add a branch protection rule to prevent changes that could break our site from being deployed. Click \u0026ldquo;Add rule\u0026rdquo;.          Add a branch protection rule to the repo    In the \u0026ldquo;Branch pattern name\u0026rdquo; type main, then select the \u0026ldquo;Require status checks to pass before merging\u0026rdquo; box. Finally select the build-and-deploy-site status check from the list and click \u0026ldquo;Create\u0026rdquo; at the bottom of the page. (You may be asked to reenter your GitHub password.) This means that the build-and-deploy-site job MUST pass, otherwise merging the PR will be blocked.          Create the branch protection rule    Now select the \u0026ldquo;Pages\u0026rdquo; option from the left-hand-side menu (second option from the bottom). This is where we configure GitHub Pages to host the website. In the \u0026ldquo;Source\u0026rdquo; section, select gh-pages from the \u0026ldquo;Branch\u0026rdquo; dropdown and leave the folder dropdown as / (root). Then click \u0026ldquo;Save\u0026rdquo;.          Configure GitHub Pages in the repo Settings    After a few moments, refresh the page. The banner along the top should now be green and read \u0026ldquo;Your site is published at https://YOUR-USERNAME.github.io\u0026rdquo;. Click the link in the browser and see your site live!  :tada: :tada: :tada: Congratulations! Your site is now live on GitHub Pages! :tada: :tada: :tada:\nIt\u0026rsquo;s still a little bare though, so let\u0026rsquo;s update our local repo in our terminal and then add some content.\ngit checkout main git pull 5️⃣ Generating Content Let\u0026rsquo;s start to make our site a little more attractive by adding some content :sparkles:\nFirst, check out a new branch to add content to:\ngit checkout -b adding-content Profile Pic It\u0026rsquo;ll be good for people to know who we are by adding a photo of us or a logo that reflects our branding!\n  Images go into a special folder that Hugo will parse when generating the HTML - so let\u0026rsquo;s create that folder!\nmkdir -p static/images   Now copy an image (of you, a logo, your pet!) into this folder. You can do this by just saving an image directly here or using the below bash command. I\u0026rsquo;m going to call my image profile_pic.png. What you call it isn\u0026rsquo;t really important, just remember it!\n# Example only - this command won\u0026#39;t actually work! cp /path/to/my/picture.png ./static/images/profile_pic.png   We let Hugo know where our profile picture is by adding the following line to the bottom of our config.toml file.\nprofilePicture = \u0026#34;images/profile_pic.png\u0026#34; :::info :wave: Notice how we didn\u0026rsquo;t have to define the path as static/images/profile_pic.png here? That\u0026rsquo;s because static is a special folder to Hugo that it knows how to parse. In fact, it\u0026rsquo;s called static as Hugo won\u0026rsquo;t modify these files in any way, just import them into the HTML files it creates - hence they are \u0026ldquo;static\u0026rdquo;. :::\n  Run the hugo server command again and visit http://localhost:1313 in your browser. You should now see your image on your site! :tada:\n          Blog homepage with profile picture    Creating a blog post Next let\u0026rsquo;s add our first blog post! This is equivalent to creating a new Markdown file with some extra metadata that Hugo will read. Hugo has a built in command to generate new Markdown files with the appropriate metadata and it will deposit all of these in the content folder. The command looks like this:\n# Example only - don\u0026#39;t run this! # (It\u0026#39;ll work, but it\u0026#39;s probably not what you want) hugo new path/to/content.md :::info :wave: If any of the folders path/ or to/ don\u0026rsquo;t already exist under content/, Hugo will create them automatically. :::\n  So let\u0026rsquo;s create a new blog post!\nhugo new blog/my-first-blog.md This will create the my-first-blog.md Markdown file in the blog folder underneath the content folder.\n  If you open this file, you will see that it is not empty!\n--- title: \u0026#34;My First Blog\u0026#34; date: 2021-05-06T13:40:20+01:00 draft: true --- This is the metadata Hugo generates that we talked about before. Hugo has prefilled the title field from the name of the Markdown file, the timestamp of when the file was created, and it has automatically put the file into draft mode.\n:::info :wave: Draft mode means that Hugo will NOT build and publish this file unless the --buildDrafts [-D] flag is passed to the hugo server command or the metadata is changed to draft: false :::\nYou can edit these fields as you wish. I strongly recommend updating the draft field to false right now so that it will automatically build when this file is merged to main.\nYou can then write your content underneath the metadata field as you like. I\u0026rsquo;m just going to leave the massage \u0026ldquo;Hello World! :earth_africa:\u0026rdquo; All together, the file looks like this:\n--- title: \u0026#34;My First Blog\u0026#34; date: 2021-05-06T13:40:20+01:00 draft: false --- Hello World! :earth_africa:   We\u0026rsquo;ll edit the config.toml again to place our blog post on the homepage of our site. And the following line to the bottom of the file:\nmainSections = [\u0026#34;blog\u0026#34;]   Run the hugo server command again and visit http://localhost:1313 in your browser. You should now see your blog post listed on your site with, as promised, a properly rendered emoji! :tada: You can then click through to the full post.\n          Homepage with a blog post listed    Close your browser window displaying your website and run Ctrl+C in your terminal to stop the hugo server command.\nEmbedding External Content using Hugo Shortcodes The beauty of using Markdown to build a blogsite is that it is a very simple file format - what you type is what is rendered. However, blogs often contain more than just words (images, tweets, videos) and Markdown is not always equipped to cope with all of these extra sources. The solution would be to manually construct a HTML block to embed the content, which breaks the simplicity of the Markdown document.\n        An example of a Markdown file using HTML blocks to embed a Google calendar and Twitter timeline into a blog page    Hugo\u0026rsquo;s solution to this problem is to provide a set of shortcodes that handle this embedding in the backend for a range of external sources including instagram, twitter, youtube, and more. So let\u0026rsquo;s experiment by adding a tweet to our blog post.\nEarlier on, I sent a (slightly self-important looking :joy:) tweet claiming how cool HelmUpgradeBot is: https://twitter.com/drsarahlgibson/status/1390312389346828291\nAll we need to embed this tweet into our blog post is the tweet ID, or the numeric part of the tweet URL.\n        The ID of a tweet is the numerical section of the URL    All together, the file now looks like this.\n--- title: \u0026#34;My First Blog\u0026#34; date: 2021-05-06T13:40:20+01:00 draft: false --- Hello World! :earth_africa: Save and close the file, then rerun hugo server and visit http://localhost:1313 in your browser again. The tweet won\u0026rsquo;t show up in the short summary of the blog post on the homepage, but if you click through, it should be embedded in the full blog page! :tada:\n        Blog post with embedded tweet    Close your browser window displaying your website and run Ctrl+C in your terminal to stop the hugo server command.\nOther shortcodes you will find useful:\n figure for linking an image from a URL ref and relref for creating links within your blog, such as to another post or section of a post  info :wave: Want to add your own image to your site by committing it to GitHub? Add it to the static/images folder, as we did with the profile picture. You can then include the image using the standard Markdown syntax ![image_alt_text](images/my_image.png) :::\n:::info :wave: If you are feeling super brave, you can even create your own shortcodes to embed specific content. Check out the ones I created here. :::\nPushing to GitHub and Merging to main Let\u0026rsquo;s save what we\u0026rsquo;ve done to GitHub and set it live on the website using the same add, commit, push, open and merge Pull Request that we\u0026rsquo;ve used previously.\ngit add . # Add everything we\u0026#39;ve changed git commit -m \u0026#34;Add our first blog post to the website\u0026#34; git push origin adding-content  On the GitHub interface, click \u0026ldquo;Create \u0026amp; pull request\u0026rdquo; Give your PR an informative title and summary, then click \u0026ldquo;Create pull request\u0026rdquo; After the continuous integration test has passed, click \u0026ldquo;Merge pull request\u0026rdquo; then \u0026ldquo;Confirm merge\u0026rdquo;  While waiting for CD/GitHub Pages to deploy the update, let\u0026rsquo;s update our local repo.\ngit checkout main git pull Then visit https://YOUR-USERNAME.github.io in the browser to see your site live.\n🏁 Conclusion So here\u0026rsquo;s what we\u0026rsquo;ve achieved over the course of this tutorial.\n We\u0026rsquo;ve setup a repository on GitHub with a Hugo site template and a theme via a git submodule We\u0026rsquo;ve added a Continuous Deployment pipeline that automatically builds our website and publishes it to GitHub Pages whenever we merge a change We\u0026rsquo;ve created a new post with Hugo and added content, including updating our profile picture and embedding content from external sources using shortcodes  From here, you can:\n Continue to use the site as it is and begin publishing your blogs Further customise your site by editing the config.toml file (see the anatole documentation and my config file for examples) Or try implementing a new theme from https://themes.gohugo.io/! You can do this by running the git submodule add command again with your new theme and then updating the config.toml file. Be warned, some settings we\u0026rsquo;ve used during this tutorial may break when changing themes!  I hope you\u0026rsquo;ve enjoyed learning how to get setup with Hugo and GitHub Pages. Happy blogging! :sparkling_heart:\n","permalink":"https://log.mhaziqrk.uk/posts/setup-hugo/","summary":"Cara Setup Hugo Static Site di Github Pages   Bahan ini disalin terus daripada website hackmd. Hanya tujuan rujukan semata-mata. Ada beberapa bahagian diubah. Tutorial boleh ditonton di youtube - Tutorial: Blogging with Hugo and GitHub Pages-Sarah Gibson    Saya akan membawa anda melalui penciptaan tapak web anda sendiri, dihoskan pada GitHub Pages dan dibina dengan Hugo. Anda boleh melihat contoh tapaknya dipautkan di bawah.\n website : https://mhaziqrk.","title":"Setup Hugo"},{"content":"Menyediakan lingkungan Pengembangan bagi Projek Sains Komputer  Amaran ! Laman sesawang ini menggunakan bahasa melayu rojak dan bercampur dengan bahasa inggeris.\n 1) Memasang XAMPP  Link Muat Turun XAMPP  Anda hanya perlu mengikut instruksi daripada installer tersebut.Tekan Next jer. Pastikan anda memilih sistem operasi yang betul dan sistem anda sudah menyokong binaan 64bit.\n 2) Memasang VS Code  Link Muat Turun VS Code   VS Code menyokong pelbagai binaan seperti 32bit, 64bit dan ARM.Pastikan semak terlebih dahulu spesifikasi komputer anda.\n 3) Memasang Extension pada VS Code dan menetapkan \u0026lsquo;user snippet\u0026rsquo; Extension yang dicadangkan :\n Php Intelephense   Perlu disable dahulu PHP Language Features  Pergi ke Extensions. Cari @builtin php. Disable PHP Language Features. Biarkan PHP Language Basics enabled untuk syntax highlighting.\n  Auto Rename Tag Indent-rainbow Beautify HTML Snippet  Tetapkan User Snippets:\n Tekan File\u0026gt;Preferences\u0026gt;User Snippets Tekan New Global Snippets , kemudian type nama snippet \u0026ldquo;html.json\u0026rdquo;  Salin html.json ini :\n{ \u0026#34;PHP Tag\u0026#34;: { \u0026#34;prefix\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;\u0026lt;?php $1 ?\u0026gt;\u0026#34; }, \u0026#34;Inline Echo\u0026#34;: { \u0026#34;prefix\u0026#34;: \u0026#34;phpp\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;\u0026lt;?= $$1; ?\u0026gt;\u0026#34; }, \u0026#34;Input Label\u0026#34;: { \u0026#34;prefix\u0026#34;: \u0026#34;formel\u0026#34;, \u0026#34;body\u0026#34;: [ \u0026#34;\u0026lt;label\u0026gt;\u0026#34;, \u0026#34;\\t${3:Username}\u0026#34;, \u0026#34;\\t\u0026lt;input type=\\\u0026#34;${1:text}\\\u0026#34; name=\\\u0026#34;${2:username}\\\u0026#34;\u0026gt;\u0026#34;, \u0026#34;\u0026lt;/label\u0026gt;\u0026#34; ] }, \u0026#34;My Form\u0026#34;: { \u0026#34;prefix\u0026#34;: \u0026#34;myform\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;\u0026lt;form method=\\\u0026#34;${1|get,post|}\\\u0026#34; action=\\\u0026#34;$2\\\u0026#34;\u0026gt;$3\u0026lt;/form\u0026gt;\u0026#34; } }  setting.json semasa  { \u0026#34;editor.tabSize\u0026#34;: 2, \u0026#34;editor.formatOnSave\u0026#34;: true, \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;HookyQR.beautify\u0026#34;, \u0026#34;explorer.openEditors.visible\u0026#34;: 0, \u0026#34;[html]\u0026#34;: { \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;HookyQR.beautify\u0026#34; }, \u0026#34;explorer.confirmDelete\u0026#34;: false, \u0026#34;editor.fontSize\u0026#34;: 20, \u0026#34;editor.lineHeight\u0026#34;: 40, \u0026#34;editor.fontFamily\u0026#34;: \u0026#34;\u0026#39;Source Code Pro\u0026#39;,Consolas, \u0026#39;Courier New\u0026#39;, monospace\u0026#34;, \u0026#34;html.format.templating\u0026#34;: true, \u0026#34;git.allowForcePush\u0026#34;: true, \u0026#34;liveServer.settings.donotShowInfoMsg\u0026#34;: true, \u0026#34;liveServer.settings.donotVerifyTags\u0026#34;: true, \u0026#34;[php]\u0026#34;: { \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;bmewburn.vscode-intelephense-client\u0026#34; }, \u0026#34;git.confirmSync\u0026#34;: false, \u0026#34;workbench.startupEditor\u0026#34;: \u0026#34;none\u0026#34;, \u0026#34;bracketPairColorizer.depreciation-notice\u0026#34;: false, \u0026#34;files.exclude\u0026#34;: { \u0026#34;**/.classpath\u0026#34;: true, \u0026#34;**/.project\u0026#34;: true, \u0026#34;**/.settings\u0026#34;: true, \u0026#34;**/.factorypath\u0026#34;: true }, \u0026#34;git.autofetch\u0026#34;: true, \u0026#34;workbench.colorTheme\u0026#34;: \u0026#34;Noctis Minimus\u0026#34;, \u0026#34;workbench.iconTheme\u0026#34;: \u0026#34;vscode-icons\u0026#34; } ","permalink":"https://log.mhaziqrk.uk/posts/setup-for-projek-sk/","summary":"Menyediakan lingkungan Pengembangan bagi Projek Sains Komputer  Amaran ! Laman sesawang ini menggunakan bahasa melayu rojak dan bercampur dengan bahasa inggeris.\n 1) Memasang XAMPP  Link Muat Turun XAMPP  Anda hanya perlu mengikut instruksi daripada installer tersebut.Tekan Next jer. Pastikan anda memilih sistem operasi yang betul dan sistem anda sudah menyokong binaan 64bit.\n 2) Memasang VS Code  Link Muat Turun VS Code   VS Code menyokong pelbagai binaan seperti 32bit, 64bit dan ARM.","title":"Menyediakan lingkungan Pengembangan bagi Projek Sains Komputer"},{"content":"","permalink":"https://log.mhaziqrk.uk/tags/","summary":"","title":"Tags"},{"content":"BTOB New Album Release : Be Together  Playlist : Be Together Album\n 1. Intro : 발자취 (The Trace)   2. 노래 (The Song)   3. 봄이 피어나 (Blooming Day)   4. 우리 (Be Together)   5. My Way   6. Whiskey   7. Interlude: Re   8. Lonely   9. 춤 (Dance with Me)   10. Higher   11. Thank You   12. 흘려보내 (It\u0026rsquo;s All Good)   13. Outro : Encore   ","permalink":"https://log.mhaziqrk.uk/posts/btob-betogether-newrelease/","summary":"BTOB New Album Release : Be Together  Playlist : Be Together Album\n 1. Intro : 발자취 (The Trace)   2. 노래 (The Song)   3. 봄이 피어나 (Blooming Day)   4. 우리 (Be Together)   5. My Way   6. Whiskey   7. Interlude: Re   8. Lonely   9. 춤 (Dance with Me)   10. Higher   11.","title":"BTOB Be Together New Album Release"}]